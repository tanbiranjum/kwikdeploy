//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class PaginatedListOfAppDefHeadDto implements IPaginatedListOfAppDefHeadDto {
    items?: AppDefHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfAppDefHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AppDefHeadDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfAppDefHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfAppDefHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfAppDefHeadDto {
    items?: AppDefHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class AppDefHeadDto implements IAppDefHeadDto {
    id?: number;
    name?: string;
    imageName?: string;
    tag?: string;

    constructor(data?: IAppDefHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.imageName = _data["imageName"];
            this.tag = _data["tag"];
        }
    }

    static fromJS(data: any): AppDefHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppDefHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["imageName"] = this.imageName;
        data["tag"] = this.tag;
        return data;
    }
}

export interface IAppDefHeadDto {
    id?: number;
    name?: string;
    imageName?: string;
    tag?: string;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class AppDefDto implements IAppDefDto {
    id?: number;
    projectId?: number;
    name?: string;
    imageName?: string;
    tag?: string;

    constructor(data?: IAppDefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.projectId = _data["projectId"];
            this.name = _data["name"];
            this.imageName = _data["imageName"];
            this.tag = _data["tag"];
        }
    }

    static fromJS(data: any): AppDefDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppDefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projectId"] = this.projectId;
        data["name"] = this.name;
        data["imageName"] = this.imageName;
        data["tag"] = this.tag;
        return data;
    }
}

export interface IAppDefDto {
    id?: number;
    projectId?: number;
    name?: string;
    imageName?: string;
    tag?: string;
}

export class ResultOfBoolean implements IResultOfBoolean {
    value?: boolean;

    constructor(data?: IResultOfBoolean) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ResultOfBoolean {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfBoolean();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

export interface IResultOfBoolean {
    value?: boolean;
}

export class ResultOfInteger implements IResultOfInteger {
    value?: number;

    constructor(data?: IResultOfInteger) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ResultOfInteger {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfInteger();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

export interface IResultOfInteger {
    value?: number;
}

export class AppDefCreateBody implements IAppDefCreateBody {
    name?: string;
    imageName?: string;
    tag?: string;

    constructor(data?: IAppDefCreateBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.imageName = _data["imageName"];
            this.tag = _data["tag"];
        }
    }

    static fromJS(data: any): AppDefCreateBody {
        data = typeof data === 'object' ? data : {};
        let result = new AppDefCreateBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["imageName"] = this.imageName;
        data["tag"] = this.tag;
        return data;
    }
}

export interface IAppDefCreateBody {
    name?: string;
    imageName?: string;
    tag?: string;
}

export class AppDefUpdateBody implements IAppDefUpdateBody {
    name?: string;
    imageName?: string;
    tag?: string;

    constructor(data?: IAppDefUpdateBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.imageName = _data["imageName"];
            this.tag = _data["tag"];
        }
    }

    static fromJS(data: any): AppDefUpdateBody {
        data = typeof data === 'object' ? data : {};
        let result = new AppDefUpdateBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["imageName"] = this.imageName;
        data["tag"] = this.tag;
        return data;
    }
}

export interface IAppDefUpdateBody {
    name?: string;
    imageName?: string;
    tag?: string;
}

export class PaginatedListOfEnvHeadDto implements IPaginatedListOfEnvHeadDto {
    items?: EnvHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfEnvHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(EnvHeadDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfEnvHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfEnvHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfEnvHeadDto {
    items?: EnvHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class EnvHeadDto implements IEnvHeadDto {
    id?: number;
    targetName?: string;
    name?: string;

    constructor(data?: IEnvHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.targetName = _data["targetName"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): EnvHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new EnvHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["targetName"] = this.targetName;
        data["name"] = this.name;
        return data;
    }
}

export interface IEnvHeadDto {
    id?: number;
    targetName?: string;
    name?: string;
}

export class EnvDto implements IEnvDto {
    id?: number;
    projectId?: number;
    targetId?: number;
    name?: string;

    constructor(data?: IEnvDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.projectId = _data["projectId"];
            this.targetId = _data["targetId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): EnvDto {
        data = typeof data === 'object' ? data : {};
        let result = new EnvDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projectId"] = this.projectId;
        data["targetId"] = this.targetId;
        data["name"] = this.name;
        return data;
    }
}

export interface IEnvDto {
    id?: number;
    projectId?: number;
    targetId?: number;
    name?: string;
}

export class EnvCreateBody implements IEnvCreateBody {
    targetId?: number;
    name?: string;

    constructor(data?: IEnvCreateBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.targetId = _data["targetId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): EnvCreateBody {
        data = typeof data === 'object' ? data : {};
        let result = new EnvCreateBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetId"] = this.targetId;
        data["name"] = this.name;
        return data;
    }
}

export interface IEnvCreateBody {
    targetId?: number;
    name?: string;
}

export class EnvUpdateBody implements IEnvUpdateBody {
    targetId?: number;
    name?: string;

    constructor(data?: IEnvUpdateBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.targetId = _data["targetId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): EnvUpdateBody {
        data = typeof data === 'object' ? data : {};
        let result = new EnvUpdateBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetId"] = this.targetId;
        data["name"] = this.name;
        return data;
    }
}

export interface IEnvUpdateBody {
    targetId?: number;
    name?: string;
}

export class PaginatedListOfPipelineHeadDto implements IPaginatedListOfPipelineHeadDto {
    items?: PipelineHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfPipelineHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PipelineHeadDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfPipelineHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfPipelineHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfPipelineHeadDto {
    items?: PipelineHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class PipelineHeadDto implements IPipelineHeadDto {
    id?: number;
    name?: string;

    constructor(data?: IPipelineHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PipelineHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new PipelineHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IPipelineHeadDto {
    id?: number;
    name?: string;
}

export class PipelineDto implements IPipelineDto {
    id?: number;
    projectId?: number;
    name?: string;

    constructor(data?: IPipelineDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.projectId = _data["projectId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PipelineDto {
        data = typeof data === 'object' ? data : {};
        let result = new PipelineDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projectId"] = this.projectId;
        data["name"] = this.name;
        return data;
    }
}

export interface IPipelineDto {
    id?: number;
    projectId?: number;
    name?: string;
}

export class PipelineCreateBody implements IPipelineCreateBody {
    name?: string;

    constructor(data?: IPipelineCreateBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PipelineCreateBody {
        data = typeof data === 'object' ? data : {};
        let result = new PipelineCreateBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IPipelineCreateBody {
    name?: string;
}

export class PipelineUpdateBody implements IPipelineUpdateBody {
    name?: string;

    constructor(data?: IPipelineUpdateBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PipelineUpdateBody {
        data = typeof data === 'object' ? data : {};
        let result = new PipelineUpdateBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IPipelineUpdateBody {
    name?: string;
}

export class PaginatedListOfProjectHeadDto implements IPaginatedListOfProjectHeadDto {
    items?: ProjectHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfProjectHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ProjectHeadDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfProjectHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfProjectHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfProjectHeadDto {
    items?: ProjectHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class ProjectHeadDto implements IProjectHeadDto {
    id?: number;
    name?: string;

    constructor(data?: IProjectHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ProjectHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IProjectHeadDto {
    id?: number;
    name?: string;
}

export class ProjectDto implements IProjectDto {
    id?: number;
    name?: string;

    constructor(data?: IProjectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ProjectDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IProjectDto {
    id?: number;
    name?: string;
}

export class ProjectCreateBody implements IProjectCreateBody {
    name?: string;

    constructor(data?: IProjectCreateBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ProjectCreateBody {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectCreateBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IProjectCreateBody {
    name?: string;
}

export class ProjectUpdateBody implements IProjectUpdateBody {
    name?: string;

    constructor(data?: IProjectUpdateBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ProjectUpdateBody {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectUpdateBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IProjectUpdateBody {
    name?: string;
}

export class PaginatedListOfReleaseHeadDto implements IPaginatedListOfReleaseHeadDto {
    items?: ReleaseHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfReleaseHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ReleaseHeadDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfReleaseHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfReleaseHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfReleaseHeadDto {
    items?: ReleaseHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class ReleaseHeadDto implements IReleaseHeadDto {
    id?: number;
    name?: string;

    constructor(data?: IReleaseHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ReleaseHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReleaseHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IReleaseHeadDto {
    id?: number;
    name?: string;
}

export class ReleaseDto implements IReleaseDto {
    id?: number;
    projectId?: number;
    name?: string;

    constructor(data?: IReleaseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.projectId = _data["projectId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ReleaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReleaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projectId"] = this.projectId;
        data["name"] = this.name;
        return data;
    }
}

export interface IReleaseDto {
    id?: number;
    projectId?: number;
    name?: string;
}

export class ReleaseCreateBody implements IReleaseCreateBody {
    name?: string;

    constructor(data?: IReleaseCreateBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ReleaseCreateBody {
        data = typeof data === 'object' ? data : {};
        let result = new ReleaseCreateBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IReleaseCreateBody {
    name?: string;
}

export class ReleaseUpdateBody implements IReleaseUpdateBody {
    name?: string;

    constructor(data?: IReleaseUpdateBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ReleaseUpdateBody {
        data = typeof data === 'object' ? data : {};
        let result = new ReleaseUpdateBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IReleaseUpdateBody {
    name?: string;
}

export class PaginatedListOfTargetHeadDto implements IPaginatedListOfTargetHeadDto {
    items?: TargetHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfTargetHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TargetHeadDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfTargetHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfTargetHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfTargetHeadDto {
    items?: TargetHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class TargetHeadDto implements ITargetHeadDto {
    id?: number;
    name?: string;
    connected?: boolean;

    constructor(data?: ITargetHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.connected = _data["connected"];
        }
    }

    static fromJS(data: any): TargetHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new TargetHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["connected"] = this.connected;
        return data;
    }
}

export interface ITargetHeadDto {
    id?: number;
    name?: string;
    connected?: boolean;
}

export class TargetDto implements ITargetDto {
    id?: number;
    projectId?: number;
    name?: string;

    constructor(data?: ITargetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.projectId = _data["projectId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): TargetDto {
        data = typeof data === 'object' ? data : {};
        let result = new TargetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projectId"] = this.projectId;
        data["name"] = this.name;
        return data;
    }
}

export interface ITargetDto {
    id?: number;
    projectId?: number;
    name?: string;
}

export class TargetCreateBody implements ITargetCreateBody {
    name?: string;

    constructor(data?: ITargetCreateBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): TargetCreateBody {
        data = typeof data === 'object' ? data : {};
        let result = new TargetCreateBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ITargetCreateBody {
    name?: string;
}

export class TargetUpdateBody implements ITargetUpdateBody {
    name?: string;

    constructor(data?: ITargetUpdateBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): TargetUpdateBody {
        data = typeof data === 'object' ? data : {};
        let result = new TargetUpdateBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ITargetUpdateBody {
    name?: string;
}

export class ResultOfString implements IResultOfString {
    value?: string | undefined;

    constructor(data?: IResultOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ResultOfString {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

export interface IResultOfString {
    value?: string | undefined;
}

export class PaginatedListOfVariableHeadDto implements IPaginatedListOfVariableHeadDto {
    items?: VariableHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfVariableHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(VariableHeadDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfVariableHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfVariableHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfVariableHeadDto {
    items?: VariableHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class VariableHeadDto implements IVariableHeadDto {
    id?: number;
    name?: string;
    isSecret?: boolean;

    constructor(data?: IVariableHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.isSecret = _data["isSecret"];
        }
    }

    static fromJS(data: any): VariableHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new VariableHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["isSecret"] = this.isSecret;
        return data;
    }
}

export interface IVariableHeadDto {
    id?: number;
    name?: string;
    isSecret?: boolean;
}

export class VariableDto implements IVariableDto {
    id?: number;
    projectId?: number;
    name?: string;
    isSecret?: boolean;

    constructor(data?: IVariableDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.projectId = _data["projectId"];
            this.name = _data["name"];
            this.isSecret = _data["isSecret"];
        }
    }

    static fromJS(data: any): VariableDto {
        data = typeof data === 'object' ? data : {};
        let result = new VariableDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projectId"] = this.projectId;
        data["name"] = this.name;
        data["isSecret"] = this.isSecret;
        return data;
    }
}

export interface IVariableDto {
    id?: number;
    projectId?: number;
    name?: string;
    isSecret?: boolean;
}

export class VariableCreateBody implements IVariableCreateBody {
    name?: string;
    isSecret?: boolean;

    constructor(data?: IVariableCreateBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.isSecret = _data["isSecret"];
        }
    }

    static fromJS(data: any): VariableCreateBody {
        data = typeof data === 'object' ? data : {};
        let result = new VariableCreateBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isSecret"] = this.isSecret;
        return data;
    }
}

export interface IVariableCreateBody {
    name?: string;
    isSecret?: boolean;
}

export class VariableUpdateBody implements IVariableUpdateBody {
    name?: string;
    isSecret?: boolean;

    constructor(data?: IVariableUpdateBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.isSecret = _data["isSecret"];
        }
    }

    static fromJS(data: any): VariableUpdateBody {
        data = typeof data === 'object' ? data : {};
        let result = new VariableUpdateBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isSecret"] = this.isSecret;
        return data;
    }
}

export interface IVariableUpdateBody {
    name?: string;
    isSecret?: boolean;
}

export class SuccessfulLoginResponse implements ISuccessfulLoginResponse {
    id?: string;
    username?: string;
    email?: string;
    token?: string;

    constructor(data?: ISuccessfulLoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): SuccessfulLoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SuccessfulLoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["email"] = this.email;
        data["token"] = this.token;
        return data;
    }
}

export interface ISuccessfulLoginResponse {
    id?: string;
    username?: string;
    email?: string;
    token?: string;
}

export class UserLogin implements IUserLogin {
    userName?: string;
    password?: string;

    constructor(data?: IUserLogin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): UserLogin {
        data = typeof data === 'object' ? data : {};
        let result = new UserLogin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data;
    }
}

export interface IUserLogin {
    userName?: string;
    password?: string;
}

export class PaginatedListOfUserHeadDto implements IPaginatedListOfUserHeadDto {
    items?: UserHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfUserHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserHeadDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfUserHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfUserHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfUserHeadDto {
    items?: UserHeadDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class UserHeadDto implements IUserHeadDto {
    id?: string;
    userName?: string | undefined;

    constructor(data?: IUserHeadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): UserHeadDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserHeadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        return data;
    }
}

export interface IUserHeadDto {
    id?: string;
    userName?: string | undefined;
}

export class UserDto implements IUserDto {
    id?: string;
    userName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.email = _data["email"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["emailConfirmed"] = this.emailConfirmed;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data;
    }
}

export interface IUserDto {
    id?: string;
    userName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
}

export class UserCreateBody implements IUserCreateBody {
    userName?: string;
    password?: string;
    confirmPassword?: string;

    constructor(data?: IUserCreateBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
        }
    }

    static fromJS(data: any): UserCreateBody {
        data = typeof data === 'object' ? data : {};
        let result = new UserCreateBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        return data;
    }
}

export interface IUserCreateBody {
    userName?: string;
    password?: string;
    confirmPassword?: string;
}

export class UserSetUserNameBody implements IUserSetUserNameBody {
    userName?: string;

    constructor(data?: IUserSetUserNameBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): UserSetUserNameBody {
        data = typeof data === 'object' ? data : {};
        let result = new UserSetUserNameBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        return data;
    }
}

export interface IUserSetUserNameBody {
    userName?: string;
}